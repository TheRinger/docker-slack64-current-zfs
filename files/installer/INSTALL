# How to install slackware64-current on a ZFS root
# PREREQUISITES
# - a disk that can be wiped fully
# - USB-stick created with https://github.com/TheRinger/docker-slack64-current-zfs
# - you've read and understood https://github.com/zfsonlinux/zfs/wiki/Debian-Stretch-Root-on-ZFS
#
# Note1: only create a mountpoint for your / dataset, create the other datasets as 'legacy':
# zfs create -o mountpoint=legacy ${ZPOOL}/home
#
# Note2: create a swap partition if you want to be able to hibernate (pm-hibernate) your system.
# It should be at least the size of your RAM.
# You've booted the USB-stick and are now in the Slackware64-current installer shell.
# Press ALT+F2 to open a terminal on tty2, for some reason it will not open on tty1.

# Empty /mnt because ZFS (by default) refuses to mount over non-empty directories
rm -f /mnt/README

# Search for your target disk in /dev/disk/by-id and save it in variable
TRYTHIS=$(ls /dev/disk/by-id|grep KINGSTON|head -n1)
export TARGET="/dev/disk/by-id/${TRYTHIS}"

# Choose a name for your ZFS pool and save it in a variable
export ZPOOL=zlan

# WIPE ALL THE THINGS on your target disk
mdadm --zero-superblock --force ${TARGET}
sgdisk --zap-all ${TARGET}
zpool labelclear -f ${TARGET}
# decide on swap amount
SWAP_AMOUNT="5000"
BOOT_AMOUNT="1000"

# Create Linux FS, swap and ZFS partitions
sgdisk -a1 -n1:34:2047                                -t1:EF02 ${TARGET}
sgdisk     -n2:0:${BOOT_AMOUNT}M                      -t2:8100 ${TARGET}
sgdisk     -n3:0:${SWAP_AMOUNT}M                      -t3:8200 ${TARGET}
sgdisk     -n4:0:0                                    -t4:BF01 ${TARGET}

# Create ZPOOL
zpool create -o ashift=12 -d \
      -o feature@async_destroy=enabled \
      -o feature@bookmarks=enabled \
      -o feature@embedded_data=enabled \
      -o feature@empty_bpobj=enabled \
      -o feature@enabled_txg=enabled \
      -o feature@extensible_dataset=enabled \
      -o feature@filesystem_limits=enabled \
      -o feature@hole_birth=enabled \
      -o feature@large_blocks=enabled \
      -o feature@lz4_compress=enabled \
      -o feature@spacemap_histogram=enabled \
      -O acltype=posixacl -O canmount=off -O compression=lz4 \
      -O normalization=formD -O relatime=on -O xattr=sa \
      -O mountpoint=/ -R /mnt \
      ${ZPOOL} ${TARGET}-part4

zfs create -o canmount=off -o mountpoint=none         ${ZPOOL}/ROOT
zfs create -o canmount=noauto -o mountpoint=/         ${ZPOOL}/ROOT/slackware
zfs create -o mountpoint=legacy -o setuid=off         ${ZPOOL}/ROOT/home
zfs create -o mountpoint=/root                        ${ZPOOL}/ROOT/home/root
zfs create -o mountpoint=legacy                       ${ZPOOL}/ROOT/opt
zfs create -o mountpoint=legacy          -o exec=on   ${ZPOOL}/ROOT/tmp
zfs create -o canmount=off -o setuid=off -o exec=off  ${ZPOOL}/ROOT/var
zfs create -o mountpoint=legacy \
           -o com.sun:auto-snapshot=false \
           -o exec=on                                 ${ZPOOL}/ROOT/var/tmp
zfs create -o mountpoint=legacy                       ${ZPOOL}/ROOT/var/log
zfs create -o com.sun:auto-snapshot=false             ${ZPOOL}/ROOT/var/cache
zfs create                                            ${ZPOOL}/ROOT/var/spool
zfs create                                            ${ZPOOL}/ROOT/var/games
zfs create                                            ${ZPOOL}/ROOT/var/mail

#zfs create -o com.sun:auto-snapshot=false -o mountpoint=/var/lib/nfs        ${ZPOOL}/ROOT/var/nfs



zfs mount ${ZPOOL}/ROOT/slackware
for dir in tmp home var/log var/tmp var/cache var/spool var/games var/mail opt
do
  mkdir -pv /mnt/${dir}
  mount -t zfs ${ZPOOL}/ROOT/${dir} /mnt/${dir}
done

mkdir -pv /mnt/boot
mkfs.ext2 ${TARGET}-part2
mount ${TARGET}-part2 /mnt/boot


chmod 1777 /mnt/tmp
chmod 1777 /mnt/var/tmp
zfs set devices=off ${ZPOOL}

# Format swap partition
mkswap ${TARGET}-part3

# Install Slackware but DO NOT REBOOT when it's finished,
# we still have to make the system bootable
setup

# Install ZFS package in /boot/initrd-tree so be included in initrd
# TODO: optimize this step, the initrd doesn't need the entire content of
#       the packages.
installpkg --root /mnt/boot/initrd-tree /usb-stick/slackware64/a/zfs-on-linux-*

export ZPOOL_VDEV_NAME_PATH=YES

# Copy patches to new system
cp /usb-stick/zfs/*.patch /mnt/tmp

# Chroot into fresh system
mount --rbind /dev  /mnt/dev
mount --rbind /proc /mnt/proc
mount --rbind /sys  /mnt/sys
chroot /mnt /bin/bash


#locale-gen en_US.UTF-8
#echo LANG=en_US.UTF-8 > /etc/default/locale


KERN=$(ls /lib/modules|head -n1)

cat <<EOF > /etc/lilo.conf
boot = ${TARGET}
compact
bitmap = /boot/slack.bmp
bmp-colors = 255,0,255,0,255,0
bmp-table = 60,6,1,16
bmp-timer = 65,27,0,255
append="ipv6.disable=1"
prompt
timeout = 300
vga = normal
image = /boot/vmlinuz
root = ${TARGET}-part4
label = linux-${KERN}
initrd = /boot/initrd.gz
read-only
EOF

# Create mkinitrd.conf
cat <<EOF > /etc/mkinitrd.conf
SOURCE_TREE="/boot/initrd-tree"
CLEAR_TREE="0"
OUTPUT_IMAGE="/boot/initrd.gz"
KERNEL_VERSION="\$(uname -r)"
KEYMAP="us"
MODULE_LIST="e1000:usb-storage:xhci-hcd:ehci-hcd:ehci-pci:xhci-pci:ohci-pci:uhci-hcd:hid:usbhid:i2c-hid:hid_generic:hid-logitech:mbcache:ext4:zfs"
#RESUMEDEV="UUID=$(blkid -t TYPE=swap -s UUID -o value)"
ROOTDEV="${TARGET}-part4"
ROOTFS="zfs"
UDEV="1"
EOF

# Copy required .so for zpool to initrd
cp /usr/lib64/libgcc_s.so* /boot/initrd-tree/usr/lib64

# Add ZFS support to boot scripts
patch /boot/initrd-tree/init < /tmp/init.zfs.patch
patch /etc/rc.d/rc.S < /tmp/rc.S.zfs.patch



# Create /etc/fstab
cat /etc/mtab >> /etc/fstab
zfs set mountpoint=legacy ${ZPOOL}/ROOT/var/log
zfs set mountpoint=legacy ${ZPOOL}/ROOT/var/tmp
zfs set mountpoint=legacy ${ZPOOL}/ROOT/tmp
zfs set mountpoint=legacy ${ZPOOL}/ROOT/opt
zfs set mountpoint=legacy ${ZPOOL}/ROOT/var/cache
zfs set mountpoint=legacy ${ZPOOL}/ROOT/home


cat >> /etc/fstab << EOF
${ZPOOL}/ROOT         /       zfs       defaults,noatime,nofail,noacl,suid,xattr,nomand,zfsutil 0      0
${ZPOOL}/ROOT/home      /home           zfs     defaults,zfsutil        0       0
${ZPOOL}/ROOT/opt             /opt            zfs       defaults,zfsutil        0       0
${ZPOOL}/ROOT/var/log   /var/log        zfs     defaults,zfsutil        0       0
${ZPOOL}/ROOT/var/tmp   /var/tmp        zfs     defaults,noatime,zfsutil        0       0
${ZPOOL}/ROOT/tmp             /tmp            zfs       defaults,noatime,zfsutil        0       0
${ZPOOL}/ROOT/var/cache /var/cache      zfs     defaults,noatime,zfsutil        0       0
proc            /proc           proc                  rw,relatime                                      00
sysfs           /sys            sysfs                 rw,relatime                                      00
devtmpfs        /dev            devtmpfs              rw,relatime,size=106728k,nr_inodes=1526682,mode=755       0       0
tmpfs           /run            tmpfs                 rw,nosuid,nodev,noexec,relatime,size=32768k,mode=755      0       0
devpts  /dev/pts        devpts        rw,relatime,gid=5,mode=620,ptmxmode=000                   0      0
tmpfs           /dev/shm        tmpfs                 rw,nosuid,nodev,noexec,relatime                  00
EOF

nano /etc/fstab
# Create initrd

cd /boot
/sbin/mkinitrd -k ${KERN} -f zfs -r ${ZPOOL} -m usb-storage:xhci-hcd:ehci-hcd:ehci-pci:xhci-pci:ohci-pci:uhci-hcd:hid:usbhid:i2c-hid:hid_generic:mbcache:ext4:zfs -u -o /boot/initrd-test.gz
# Install Lilo
lilo -M ${TARGET} mbr -C /etc/lilo.conf
# Exit chroot
exit

# Clean up
for dir in boot/efi home opt tmp var/log var/tmp sys proc dev
do
  umount -flv /mnt/${dir}
done

zfs umount -a
zpool export -a
zpool sync ${ZPOOL}
sync

# Reboot
reboot
